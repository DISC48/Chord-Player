{"id":"../node_modules/@tonaljs/chord/dist/index.esnext.js","dependencies":[{"name":"/Users/musicandcoding/Documents/Projects/chordstuff/node_modules/@tonaljs/chord/dist/index.esnext.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/musicandcoding/Documents/Projects/chordstuff/package.json","includedInParent":true,"mtime":1582711025140},{"name":"/Users/musicandcoding/Documents/Projects/chordstuff/node_modules/@tonaljs/chord/package.json","includedInParent":true,"mtime":1578128070943},{"name":"@tonaljs/chord-dictionary","loc":{"line":1,"column":48},"parent":"/Users/musicandcoding/Documents/Projects/chordstuff/node_modules/@tonaljs/chord/dist/index.esnext.js","resolved":"/Users/musicandcoding/Documents/Projects/chordstuff/node_modules/@tonaljs/chord-dictionary/dist/index.esnext.js"},{"name":"@tonaljs/pcset","loc":{"line":2,"column":41},"parent":"/Users/musicandcoding/Documents/Projects/chordstuff/node_modules/@tonaljs/chord/dist/index.esnext.js","resolved":"/Users/musicandcoding/Documents/Projects/chordstuff/node_modules/@tonaljs/pcset/dist/index.esnext.js"},{"name":"@tonaljs/scale-dictionary","loc":{"line":3,"column":24},"parent":"/Users/musicandcoding/Documents/Projects/chordstuff/node_modules/@tonaljs/chord/dist/index.esnext.js","resolved":"/Users/musicandcoding/Documents/Projects/chordstuff/node_modules/@tonaljs/scale-dictionary/dist/index.esnext.js"},{"name":"@tonaljs/tonal","loc":{"line":4,"column":61},"parent":"/Users/musicandcoding/Documents/Projects/chordstuff/node_modules/@tonaljs/chord/dist/index.esnext.js","resolved":"/Users/musicandcoding/Documents/Projects/chordstuff/node_modules/@tonaljs/tonal/dist/index.esnext.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.chord = chord;\nexports.chordScales = chordScales;\nexports.extended = extended;\nexports.reduced = reduced;\nexports.tokenize = tokenize;\nexports.transpose = transpose;\n\nvar _chordDictionary = require(\"@tonaljs/chord-dictionary\");\n\nvar _pcset = require(\"@tonaljs/pcset\");\n\nvar _scaleDictionary = require(\"@tonaljs/scale-dictionary\");\n\nvar _tonal = require(\"@tonaljs/tonal\");\n\nconst NoChord = {\n  empty: true,\n  name: \"\",\n  type: \"\",\n  tonic: null,\n  setNum: NaN,\n  quality: \"Unknown\",\n  chroma: \"\",\n  normalized: \"\",\n  aliases: [],\n  notes: [],\n  intervals: []\n}; // 6, 64, 7, 9, 11 and 13 are consider part of the chord\n// (see https://github.com/danigb/tonal/issues/55)\n\nconst NUM_TYPES = /^(6|64|7|9|11|13)$/;\n/**\r\n * Tokenize a chord name. It returns an array with the tonic and chord type\r\n * If not tonic is found, all the name is considered the chord name.\r\n *\r\n * This function does NOT check if the chord type exists or not. It only tries\r\n * to split the tonic and chord type.\r\n *\r\n * @function\r\n * @param {string} name - the chord name\r\n * @return {Array} an array with [tonic, type]\r\n * @example\r\n * tokenize(\"Cmaj7\") // => [ \"C\", \"maj7\" ]\r\n * tokenize(\"C7\") // => [ \"C\", \"7\" ]\r\n * tokenize(\"mMaj7\") // => [ null, \"mMaj7\" ]\r\n * tokenize(\"Cnonsense\") // => [ null, \"nonsense\" ]\r\n */\n\nfunction tokenize(name) {\n  const [lt, acc, oct, type] = (0, _tonal.tokenizeNote)(name);\n\n  if (lt === \"\") {\n    return [\"\", name];\n  } // aug is augmented (see https://github.com/danigb/tonal/issues/55)\n\n\n  if (lt === \"A\" && type === \"ug\") {\n    return [\"\", \"aug\"];\n  } // see: https://github.com/tonaljs/tonal/issues/70\n\n\n  if (!type && (oct === \"4\" || oct === \"5\")) {\n    return [lt + acc, oct];\n  }\n\n  if (NUM_TYPES.test(oct)) {\n    return [lt + acc, oct + type];\n  } else {\n    return [lt + acc + oct, type];\n  }\n}\n/**\r\n * Get a Chord from a chord name.\r\n */\n\n\nfunction chord(src) {\n  const tokens = Array.isArray(src) ? src : tokenize(src);\n  const tonic = (0, _tonal.note)(tokens[0]).name;\n  const st = (0, _chordDictionary.chordType)(tokens[1]);\n\n  if (st.empty || src === \"\") {\n    return NoChord;\n  }\n\n  const type = st.name;\n  const notes = tonic ? st.intervals.map(i => (0, _tonal.transpose)(tonic, i)) : [];\n  const name = tonic ? tonic + \" \" + type : type;\n  return { ...st,\n    name,\n    type,\n    tonic,\n    notes\n  };\n}\n/**\r\n * Transpose a chord name\r\n *\r\n * @param {string} chordName - the chord name\r\n * @return {string} the transposed chord\r\n *\r\n * @example\r\n * transpose('Dm7', 'P4') // => 'Gm7\r\n */\n\n\nfunction transpose(chordName, interval) {\n  const [tonic, type] = tokenize(chordName);\n\n  if (!tonic) {\n    return name;\n  }\n\n  return (0, _tonal.transpose)(tonic, interval) + type;\n}\n/**\r\n * Get all scales where the given chord fits\r\n *\r\n * @example\r\n * chordScales('C7b9')\r\n * // => [\"phrygian dominant\", \"flamenco\", \"spanish heptatonic\", \"half-whole diminished\", \"chromatic\"]\r\n */\n\n\nfunction chordScales(name) {\n  const s = chord(name);\n  const isChordIncluded = (0, _pcset.isSupersetOf)(s.chroma);\n  return (0, _scaleDictionary.entries)().filter(scale => isChordIncluded(scale.chroma)).map(scale => scale.name);\n}\n/**\r\n * Get all chords names that are a superset of the given one\r\n * (has the same notes and at least one more)\r\n *\r\n * @function\r\n * @example\r\n * extended(\"CMaj7\")\r\n * // => [ 'Cmaj#4', 'Cmaj7#9#11', 'Cmaj9', 'CM7add13', 'Cmaj13', 'Cmaj9#11', 'CM13#11', 'CM7b9' ]\r\n */\n\n\nfunction extended(chordName) {\n  const s = chord(chordName);\n  const isSuperset = (0, _pcset.isSupersetOf)(s.chroma);\n  return (0, _chordDictionary.entries)().filter(chord => isSuperset(chord.chroma)).map(chord => s.tonic + chord.aliases[0]);\n}\n/**\r\n * Find all chords names that are a subset of the given one\r\n * (has less notes but all from the given chord)\r\n *\r\n * @example\r\n */\n\n\nfunction reduced(chordName) {\n  const s = chord(chordName);\n  const isSubset = (0, _pcset.isSubsetOf)(s.chroma);\n  return (0, _chordDictionary.entries)().filter(chord => isSubset(chord.chroma)).map(chord => s.tonic + chord.aliases[0]);\n}"},"sourceMaps":{"js":{"mappings":[],"sources":{},"lineCount":null}},"error":null,"hash":"e82643b6bc76d27de746f7e205de5ce8","cacheData":{"env":{}}}